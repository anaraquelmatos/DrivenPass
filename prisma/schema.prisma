// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  email        String @unique
  password     String 
  createdAt    DateTime @default(now())
  credetials   Credential[]
  sessions     Session[]
  notes        Note[]
  cards        Card[]
  wifis        Wifi[]

  @@map("users")
}

model Credential {
  id           Int    @id @default(autoincrement())
  url          String 
  username     String
  password     String
  title        String
  createdAt    DateTime @default(now())
  user         User   @relation(fields: [userId],references: [id])
  userId       Int

  @@unique([userId, title])
  @@map("credentials")
}

model Session {
  id           Int    @id @default(autoincrement())
  token        String
  createdAt    DateTime @default(now())
  user         User   @relation(fields: [userId],references: [id])
  userId       Int

  @@map("sessions")
}

model Note {
  id           Int    @id @default(autoincrement())
  title        String @db.VarChar(50)
  annotation  String @db.VarChar(1000)
  createdAt    DateTime @default(now())
  user         User   @relation(fields: [userId],references: [id])
  userId       Int

  @@unique([userId, title])
  @@map("notes")
}

enum type{
  credit
  debit
  creditAndDebit
}

model Card {
  id           Int    @id @default(autoincrement())
  number       String
  printedName  String
  securityCode String
  expirationDate String
  password     String
  isVirtual    Boolean @default(false)
  type         type
  title        String
  createdAt    DateTime @default(now())
  user         User   @relation(fields: [userId],references: [id])
  userId       Int

  @@unique([userId, title])
  @@map("cards")
}

model Wifi {
  id           Int    @id @default(autoincrement())
  networkName  String
  password     String
  title        String
  createdAt    DateTime @default(now())
  user         User   @relation(fields: [userId],references: [id])
  userId       Int

  @@map("wifis")
}


